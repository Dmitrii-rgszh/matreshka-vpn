import React, { useState } from 'react';
import { useTelegram } from '../hooks/useTelegram';

interface SettingItem {
  id: string;
  title: string;
  subtitle: string;
  icon: string;
  type: 'toggle' | 'select' | 'action';
  value?: boolean | string;
  options?: { label: string; value: string }[];
  action?: () => void;
}

const Settings: React.FC = () => {
  const { hapticFeedback, showAlert, showConfirm, user } = useTelegram();
  
  const [autoConnect, setAutoConnect] = useState(true);
  const [killSwitch, setKillSwitch] = useState(false);
  const [notifications, setNotifications] = useState(true);
  const [protocol, setProtocol] = useState('wireguard');
  const [theme, setTheme] = useState('auto');

  const handleToggle = (setting: string, currentValue: boolean) => {
    hapticFeedback('light');
    
    switch (setting) {
      case 'autoConnect':
        setAutoConnect(!currentValue);
        break;
      case 'killSwitch':
        setKillSwitch(!currentValue);
        break;
      case 'notifications':
        setNotifications(!currentValue);
        break;
    }
  };

  const handleSelect = (setting: string, value: string) => {
    hapticFeedback('light');
    
    switch (setting) {
      case 'protocol':
        setProtocol(value);
        break;
      case 'theme':
        setTheme(value);
        break;
    }
  };

  const handleClearData = async () => {
    const confirmed = await showConfirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.');
    if (confirmed) {
      hapticFeedback('success');
      showAlert('–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã!');
    }
  };

  const handleSupport = () => {
    hapticFeedback('light');
    showAlert('–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @MatreshkaVPN_Support');
  };

  const handleAbout = () => {
    hapticFeedback('light');
    showAlert('MatreshkaVPN v1.0.0\nü™Ü –ó–∞—â–∏—Ç–∞ —Å —Ä—É—Å—Å–∫–æ–π –¥—É—à–æ–π\n\n–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –≤ –†–æ—Å—Å–∏–∏');
  };

  const settings: SettingItem[] = [
    {
      id: 'autoConnect',
      title: '–ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
      subtitle: '–ü–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ VPN –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ',
      icon: 'üöÄ',
      type: 'toggle',
      value: autoConnect,
    },
    {
      id: 'killSwitch',
      title: 'Kill Switch',
      subtitle: '–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ VPN',
      icon: 'üõ°Ô∏è',
      type: 'toggle',
      value: killSwitch,
    },
    {
      id: 'notifications',
      title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      subtitle: '–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
      icon: 'üîî',
      type: 'toggle',
      value: notifications,
    },
    {
      id: 'protocol',
      title: '–ü—Ä–æ—Ç–æ–∫–æ–ª VPN',
      subtitle: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
      icon: '‚öôÔ∏è',
      type: 'select',
      value: protocol,
      options: [
        { label: 'WireGuard (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º)', value: 'wireguard' },
        { label: 'OpenVPN', value: 'openvpn' },
        { label: 'IKEv2', value: 'ikev2' },
      ],
    },
    {
      id: 'theme',
      title: '–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è',
      subtitle: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      icon: 'üé®',
      type: 'select',
      value: theme,
      options: [
        { label: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', value: 'auto' },
        { label: '–°–≤–µ—Ç–ª–∞—è', value: 'light' },
        { label: '–¢—ë–º–Ω–∞—è', value: 'dark' },
        { label: '–†—É—Å—Å–∫–∞—è (–∫—Ä–∞—Å–Ω–∞—è)', value: 'russian' },
      ],
    },
  ];

  const actionItems: SettingItem[] = [
    {
      id: 'support',
      title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
      subtitle: '–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
      icon: 'üí¨',
      type: 'action',
      action: handleSupport,
    },
    {
      id: 'clearData',
      title: '–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
      subtitle: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      icon: 'üóëÔ∏è',
      type: 'action',
      action: handleClearData,
    },
    {
      id: 'about',
      title: '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
      subtitle: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö',
      icon: '‚ÑπÔ∏è',
      type: 'action',
      action: handleAbout,
    },
  ];

  const pageStyles = {
    container: {
      padding: '20px',
      maxWidth: '400px',
      margin: '0 auto',
      paddingBottom: '20px',
    },
    title: {
      fontSize: '24px',
      fontWeight: '600',
      color: '#ffffff',
      marginBottom: '8px',
      textAlign: 'center' as const,
      textShadow: '0 0 10px rgba(255, 215, 0, 0.5)',
    },
    subtitle: {
      fontSize: '14px',
      color: '#FFD700',
      textAlign: 'center' as const,
      marginBottom: '30px',
      opacity: 0.8,
    },
    userCard: {
      background: 'linear-gradient(135deg, #8B0000 0%, #DC143C 100%)',
      borderRadius: '16px',
      padding: '20px',
      marginBottom: '30px',
      border: '1px solid rgba(255, 215, 0, 0.3)',
      display: 'flex',
      alignItems: 'center',
      gap: '15px',
    },
    userAvatar: {
      width: '50px',
      height: '50px',
      borderRadius: '50%',
      background: 'linear-gradient(135deg, #FFD700 0%, #FFA500 100%)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      fontSize: '24px',
      border: '2px solid rgba(255, 215, 0, 0.5)',
    },
    userInfo: {
      flex: 1,
    },
    userName: {
      fontSize: '18px',
      fontWeight: '600',
      color: '#ffffff',
      marginBottom: '4px',
    },
    userStatus: {
      fontSize: '14px',
      color: '#FFD700',
      fontWeight: '500',
    },
    section: {
      marginBottom: '25px',
    },
    sectionTitle: {
      fontSize: '16px',
      fontWeight: '600',
      color: '#FFD700',
      marginBottom: '15px',
      textTransform: 'uppercase' as const,
      letterSpacing: '0.5px',
    },
    settingCard: {
      background: 'linear-gradient(135deg, #8B0000 0%, #DC143C 100%)',
      borderRadius: '12px',
      padding: '16px',
      marginBottom: '8px',
      border: '1px solid rgba(255, 215, 0, 0.3)',
      display: 'flex',
      alignItems: 'center',
      gap: '15px',
      cursor: 'pointer',
      transition: 'all 0.3s ease',
    },
    settingIcon: {
      fontSize: '24px',
      filter: 'drop-shadow(0 0 8px rgba(255, 215, 0, 0.5))',
    },
    settingInfo: {
      flex: 1,
    },
    settingTitle: {
      fontSize: '16px',
      fontWeight: '600',
      color: '#ffffff',
      marginBottom: '4px',
    },
    settingSubtitle: {
      fontSize: '12px',
      color: '#b0b8c5',
      lineHeight: '1.3',
    },
    settingControl: {
      minWidth: '60px',
      display: 'flex',
      justifyContent: 'flex-end',
    },
    toggle: {
      width: '50px',
      height: '28px',
      borderRadius: '14px',
      position: 'relative' as const,
      cursor: 'pointer',
      transition: 'all 0.3s ease',
    },
    toggleActive: {
      background: 'linear-gradient(135deg, #4CAF50 0%, #2E7D32 100%)',
      boxShadow: '0 0 15px rgba(76, 175, 80, 0.5)',
    },
    toggleInactive: {
      background: 'linear-gradient(135deg, #666 0%, #444 100%)',
    },
    toggleSlider: {
      position: 'absolute' as const,
      top: '2px',
      width: '24px',
      height: '24px',
      borderRadius: '50%',
      background: '#ffffff',
      transition: 'all 0.3s ease',
      boxShadow: '0 2px 6px rgba(0, 0, 0, 0.3)',
    },
    toggleSliderActive: {
      left: '24px',
    },
    toggleSliderInactive: {
      left: '2px',
    },
    selectValue: {
      fontSize: '14px',
      color: '#FFD700',
      fontWeight: '500',
    },
    arrow: {
      fontSize: '16px',
      color: '#b0b8c5',
      marginLeft: '8px',
    },
  };

  const renderControl = (setting: SettingItem) => {
    switch (setting.type) {
      case 'toggle':
        return (
          <div
            style={{
              ...pageStyles.toggle,
              ...(setting.value ? pageStyles.toggleActive : pageStyles.toggleInactive),
            }}
            onClick={(e) => {
              e.stopPropagation();
              handleToggle(setting.id, setting.value as boolean);
            }}
          >
            <div
              style={{
                ...pageStyles.toggleSlider,
                ...(setting.value ? pageStyles.toggleSliderActive : pageStyles.toggleSliderInactive),
              }}
            ></div>
          </div>
        );
      
      case 'select':
        const selectedOption = setting.options?.find(opt => opt.value === setting.value);
        return (
          <div style={pageStyles.settingControl}>
            <span style={pageStyles.selectValue}>
              {selectedOption?.label.split(' ')[0]}
            </span>
            <span style={pageStyles.arrow}>‚Ä∫</span>
          </div>
        );
      
      case 'action':
        return (
          <span style={pageStyles.arrow}>‚Ä∫</span>
        );
      
      default:
        return null;
    }
  };

  const getUserInitials = () => {
    if (!user) return 'üë§';
    const firstName = user.first_name || '';
    const lastName = user.last_name || '';
    return (firstName.charAt(0) + lastName.charAt(0)).toUpperCase() || 'üë§';
  };

  return (
    <div style={pageStyles.container}>
      <h1 style={pageStyles.title}>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
      <p style={pageStyles.subtitle}>
        –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥ —Å–µ–±—è
      </p>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {user && (
        <div style={pageStyles.userCard}>
          <div style={pageStyles.userAvatar}>
            {user.photo_url ? (
              <img 
                src={user.photo_url} 
                alt="Avatar" 
                style={{
                  width: '100%',
                  height: '100%',
                  borderRadius: '50%',
                  objectFit: 'cover'
                }}
              />
            ) : (
              getUserInitials()
            )}
          </div>
          <div style={pageStyles.userInfo}>
            <div style={pageStyles.userName}>
              {user.first_name} {user.last_name || ''}
            </div>
            <div style={pageStyles.userStatus}>
              {user.is_premium ? 'üëë Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : 'üÜì Freemium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
            </div>
          </div>
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <div style={pageStyles.section}>
        <div style={pageStyles.sectionTitle}>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</div>
        {settings.map((setting) => (
          <div
            key={setting.id}
            style={pageStyles.settingCard}
            onClick={() => {
              if (setting.type === 'select') {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞
                hapticFeedback('light');
              }
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-1px)';
              e.currentTarget.style.boxShadow = '0 6px 20px rgba(255, 215, 0, 0.2)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0px)';
              e.currentTarget.style.boxShadow = 'none';
            }}
          >
            <div style={pageStyles.settingIcon}>{setting.icon}</div>
            <div style={pageStyles.settingInfo}>
              <div style={pageStyles.settingTitle}>{setting.title}</div>
              <div style={pageStyles.settingSubtitle}>{setting.subtitle}</div>
            </div>
            <div style={pageStyles.settingControl}>
              {renderControl(setting)}
            </div>
          </div>
        ))}
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div style={pageStyles.section}>
        <div style={pageStyles.sectionTitle}>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</div>
        {actionItems.map((item) => (
          <div
            key={item.id}
            style={pageStyles.settingCard}
            onClick={item.action}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-1px)';
              e.currentTarget.style.boxShadow = '0 6px 20px rgba(255, 215, 0, 0.2)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0px)';
              e.currentTarget.style.boxShadow = 'none';
            }}
          >
            <div style={pageStyles.settingIcon}>{item.icon}</div>
            <div style={pageStyles.settingInfo}>
              <div style={pageStyles.settingTitle}>{item.title}</div>
              <div style={pageStyles.settingSubtitle}>{item.subtitle}</div>
            </div>
            <div style={pageStyles.settingControl}>
              {renderControl(item)}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Settings;